// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package migrations generated by go-bindata.// sources:
// migrations/001_init.down.sql
// migrations/001_init.up.sql
// migrations/002_add_type_column.down.sql
// migrations/002_add_type_column.up.sql
// migrations/003_auth.down.sql
// migrations/003_auth.up.sql
// migrations/004_add_last_seen.down.sql
// migrations/004_add_last_seen.up.sql
package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __001_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\xae\x2c\x2e\x49\xcd\x8d\x2f\x49\x4c\xca\x49\x2d\xb6\x06\x04\x00\x00\xff\xff\x63\xc3\x98\x16\x19\x00\x00\x00")

func _001_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_initDownSql,
		"001_init.down.sql",
	)
}

func _001_initDownSql() (*asset, error) {
	bytes, err := _001_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_init.down.sql", size: 25, mode: os.FileMode(420), modTime: time.Unix(1639499061, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __001_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xcc\xbd\x0a\xc2\x30\x14\x47\xf1\xbd\x4f\xf1\x1f\x5b\x70\x12\x37\xa7\x6b\x7b\x8b\xc1\xf4\x83\xf4\x06\xed\x54\xaa\xcd\x20\x54\x0b\x49\x3a\xf8\xf6\x42\x11\xe7\xf3\xe3\xe4\x86\x49\x18\x42\x27\xcd\x50\x25\xea\x46\xc0\x37\xd5\x49\x87\xf0\x09\xd1\xbd\x86\x38\xde\x67\x17\x90\x26\x00\xb0\xae\xcf\x09\xd6\xaa\x02\xad\x51\x15\x99\x1e\x17\xee\x77\x5b\x7a\x2c\xef\xe8\x97\x79\x76\x1e\xf9\x99\x4c\x7a\xd8\x67\xdb\xad\xb6\x5a\xff\x84\x77\x63\x74\xd3\x30\x46\x88\xaa\xb8\x13\xaa\xda\x3f\x41\xc1\x25\x59\x2d\xa8\x9b\x6b\x9a\x25\xd9\x31\xf9\x06\x00\x00\xff\xff\xf0\xb8\x01\x4a\x9b\x00\x00\x00")

func _001_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_initUpSql,
		"001_init.up.sql",
	)
}

func _001_initUpSql() (*asset, error) {
	bytes, err := _001_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_init.up.sql", size: 155, mode: os.FileMode(420), modTime: time.Unix(1639499061, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __002_add_type_columnDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\xae\x2c\x2e\x49\xcd\x8d\x2f\x49\x4c\xca\x49\x2d\x56\x70\x09\xf2\x0f\x50\x70\xf6\xf7\x09\xf5\xf5\x53\x28\xa9\x2c\x48\xb5\x06\x04\x00\x00\xff\xff\xc5\x40\xfa\x41\x2b\x00\x00\x00")

func _002_add_type_columnDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__002_add_type_columnDownSql,
		"002_add_type_column.down.sql",
	)
}

func _002_add_type_columnDownSql() (*asset, error) {
	bytes, err := _002_add_type_columnDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "002_add_type_column.down.sql", size: 43, mode: os.FileMode(420), modTime: time.Unix(1642713605, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __002_add_type_columnUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\xae\x2c\x2e\x49\xcd\x8d\x2f\x49\x4c\xca\x49\x2d\x56\x70\x74\x71\x51\x70\xf6\xf7\x09\xf5\xf5\x53\x28\xa9\x2c\x48\x55\x08\x73\x0c\x72\xf6\x70\x0c\xd2\x30\x36\xd2\x54\x70\x71\x75\x73\x0c\xf5\x09\x51\x50\x57\xb7\x06\x04\x00\x00\xff\xff\xcb\x6f\x28\xcf\x41\x00\x00\x00")

func _002_add_type_columnUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__002_add_type_columnUpSql,
		"002_add_type_column.up.sql",
	)
}

func _002_add_type_columnUpSql() (*asset, error) {
	bytes, err := _002_add_type_columnUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "002_add_type_column.up.sql", size: 65, mode: os.FileMode(420), modTime: time.Unix(1642713605, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __003_authDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\xae\x2c\x2e\x49\xcd\x8d\x4f\x2c\x2d\xc9\xb0\x06\x04\x00\x00\xff\xff\x05\x69\x1f\x3a\x17\x00\x00\x00")

func _003_authDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__003_authDownSql,
		"003_auth.down.sql",
	)
}

func _003_authDownSql() (*asset, error) {
	bytes, err := _003_authDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "003_auth.down.sql", size: 23, mode: os.FileMode(420), modTime: time.Unix(1643324586, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __003_authUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x1c\xcc\x31\x0a\xc3\x20\x18\x05\xe0\xdd\x53\xbc\x31\x81\xde\xa0\x93\x6d\xff\x80\x54\x4d\xd0\x17\x9a\x4c\x41\xaa\xd0\xa5\x4b\xb4\x43\x6f\x1f\xc8\xfc\xc1\x77\x0f\xa2\x29\xa0\xbe\x59\x81\x19\xe0\x47\x42\x16\x13\x19\x51\xff\xb5\x95\xef\x96\x7e\xed\x83\x4e\x01\x40\xca\x79\x2f\xb5\x82\xb2\x10\x53\x30\x4e\x87\x15\x4f\x59\x2f\xa7\xbe\xf7\x92\x5a\xc9\x5b\x6a\xa0\x71\x12\xa9\xdd\x74\x7e\x7e\xb6\x16\x0f\x19\xf4\x6c\x09\x3f\xbe\xba\x5e\xf5\x57\x75\x04\x00\x00\xff\xff\x41\x41\x30\x05\x7a\x00\x00\x00")

func _003_authUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__003_authUpSql,
		"003_auth.up.sql",
	)
}

func _003_authUpSql() (*asset, error) {
	bytes, err := _003_authUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "003_auth.up.sql", size: 122, mode: os.FileMode(420), modTime: time.Unix(1643324586, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __004_add_last_seenDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\xae\x2c\x2e\x49\xcd\x8d\x4f\x2c\x2d\xc9\xe0\x72\x09\xf2\x0f\x50\x70\xf6\xf7\x09\xf5\xf5\x53\xc8\x49\x2c\x2e\x89\x2f\x4e\x4d\xcd\xb3\xe6\x02\x04\x00\x00\xff\xff\xcf\xd7\x10\x88\x2f\x00\x00\x00")

func _004_add_last_seenDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__004_add_last_seenDownSql,
		"004_add_last_seen.down.sql",
	)
}

func _004_add_last_seenDownSql() (*asset, error) {
	bytes, err := _004_add_last_seenDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "004_add_last_seen.down.sql", size: 47, mode: os.FileMode(420), modTime: time.Unix(1643395801, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __004_add_last_seenUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\xae\x2c\x2e\x49\xcd\x8d\x4f\x2c\x2d\xc9\xe0\x72\x74\x71\x51\x70\xf6\xf7\x09\xf5\xf5\x53\xc8\x49\x2c\x2e\x89\x2f\x4e\x4d\xcd\x53\x08\xf1\xf4\x75\x0d\x0e\x71\xf4\x0d\x50\x70\x71\x75\x73\x0c\xf5\x09\x51\xf0\x0b\xf5\xf1\xb1\x06\x04\x00\x00\xff\xff\x8d\xec\x4a\xa7\x44\x00\x00\x00")

func _004_add_last_seenUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__004_add_last_seenUpSql,
		"004_add_last_seen.up.sql",
	)
}

func _004_add_last_seenUpSql() (*asset, error) {
	bytes, err := _004_add_last_seenUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "004_add_last_seen.up.sql", size: 68, mode: os.FileMode(420), modTime: time.Unix(1643402604, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"001_init.down.sql":            _001_initDownSql,
	"001_init.up.sql":              _001_initUpSql,
	"002_add_type_column.down.sql": _002_add_type_columnDownSql,
	"002_add_type_column.up.sql":   _002_add_type_columnUpSql,
	"003_auth.down.sql":            _003_authDownSql,
	"003_auth.up.sql":              _003_authUpSql,
	"004_add_last_seen.down.sql":   _004_add_last_seenDownSql,
	"004_add_last_seen.up.sql":     _004_add_last_seenUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"001_init.down.sql":            &bintree{_001_initDownSql, map[string]*bintree{}},
	"001_init.up.sql":              &bintree{_001_initUpSql, map[string]*bintree{}},
	"002_add_type_column.down.sql": &bintree{_002_add_type_columnDownSql, map[string]*bintree{}},
	"002_add_type_column.up.sql":   &bintree{_002_add_type_columnUpSql, map[string]*bintree{}},
	"003_auth.down.sql":            &bintree{_003_authDownSql, map[string]*bintree{}},
	"003_auth.up.sql":              &bintree{_003_authUpSql, map[string]*bintree{}},
	"004_add_last_seen.down.sql":   &bintree{_004_add_last_seenDownSql, map[string]*bintree{}},
	"004_add_last_seen.up.sql":     &bintree{_004_add_last_seenUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
