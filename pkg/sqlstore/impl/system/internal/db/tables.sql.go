// Code generated by sqlc. DO NOT EDIT.
// source: tables.sql

package db

import (
	"context"
)

const getTable = `-- name: GetTable :one
SELECT controller, created_at, id, structure, description, name FROM system_tables WHERE id = $1
`

func (q *Queries) GetTable(ctx context.Context, id int64) (SystemTable, error) {
	row := q.db.QueryRow(ctx, getTable, id)
	var i SystemTable
	err := row.Scan(
		&i.Controller,
		&i.CreatedAt,
		&i.ID,
		&i.Structure,
		&i.Description,
		&i.Name,
	)
	return i, err
}

const getTablesByController = `-- name: GetTablesByController :many
SELECT controller, created_at, id, structure, description, name FROM system_tables WHERE controller = $1
`

func (q *Queries) GetTablesByController(ctx context.Context, controller string) ([]SystemTable, error) {
	rows, err := q.db.Query(ctx, getTablesByController, controller)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SystemTable
	for rows.Next() {
		var i SystemTable
		if err := rows.Scan(
			&i.Controller,
			&i.CreatedAt,
			&i.ID,
			&i.Structure,
			&i.Description,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
