// Code generated by sqlc. DO NOT EDIT.
// source: tables.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const getTable = `-- name: GetTable :one
SELECT uuid, controller, created_at FROM system_tables WHERE uuid = $1
`

func (q *Queries) GetTable(ctx context.Context, uuid uuid.UUID) (SystemTable, error) {
	row := q.db.QueryRow(ctx, getTable, uuid)
	var i SystemTable
	err := row.Scan(&i.UUID, &i.Controller, &i.CreatedAt)
	return i, err
}

const getTablesByController = `-- name: GetTablesByController :many
SELECT uuid, controller, created_at FROM system_tables WHERE controller = $1
`

func (q *Queries) GetTablesByController(ctx context.Context, controller string) ([]SystemTable, error) {
	rows, err := q.db.Query(ctx, getTablesByController, controller)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SystemTable
	for rows.Next() {
		var i SystemTable
		if err := rows.Scan(&i.UUID, &i.Controller, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertTable = `-- name: InsertTable :exec
INSERT INTO system_tables (
    uuid,
    controller
    ) VALUES (
      $1,
      $2)
`

type InsertTableParams struct {
	UUID       uuid.UUID
	Controller string
}

func (q *Queries) InsertTable(ctx context.Context, arg InsertTableParams) error {
	_, err := q.db.Exec(ctx, insertTable, arg.UUID, arg.Controller)
	return err
}
