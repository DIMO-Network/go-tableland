// Code generated by sqlc. DO NOT EDIT.
// source: auth.sql

package db

import (
	"context"
)

const authorize = `-- name: Authorize :exec
INSERT INTO system_auth ("address") VALUES ($1)
`

func (q *Queries) Authorize(ctx context.Context, address string) error {
	_, err := q.db.Exec(ctx, authorize, address)
	return err
}

const isAuthorized = `-- name: IsAuthorized :one
SELECT EXISTS(SELECT 1 from system_auth WHERE address=$1) AS "exists"
`

func (q *Queries) IsAuthorized(ctx context.Context, address string) (bool, error) {
	row := q.db.QueryRow(ctx, isAuthorized, address)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const revoke = `-- name: Revoke :exec
DELETE FROM system_auth WHERE address=$1
`

func (q *Queries) Revoke(ctx context.Context, address string) error {
	_, err := q.db.Exec(ctx, revoke, address)
	return err
}
